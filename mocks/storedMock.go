// Code generated by MockGen. DO NOT EDIT.
// Source: ./gmc/myInterface.go

// Package myMock is a generated GoMock package.
package myMock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockmyDB is a mock of myDB interface.
type MockmyDB struct {
	ctrl     *gomock.Controller
	recorder *MockmyDBMockRecorder
}

// MockmyDBMockRecorder is the mock recorder for MockmyDB.
type MockmyDBMockRecorder struct {
	mock *MockmyDB
}

// NewMockmyDB creates a new mock instance.
func NewMockmyDB(ctrl *gomock.Controller) *MockmyDB {
	mock := &MockmyDB{ctrl: ctrl}
	mock.recorder = &MockmyDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmyDB) EXPECT() *MockmyDBMockRecorder {
	return m.recorder
}

// AddMoney mocks base method.
func (m *MockmyDB) AddMoney(name string, money int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMoney", name, money)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddMoney indicates an expected call of AddMoney.
func (mr *MockmyDBMockRecorder) AddMoney(name, money interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMoney", reflect.TypeOf((*MockmyDB)(nil).AddMoney), name, money)
}

// CheckStats mocks base method.
func (m *MockmyDB) CheckStats(name string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStats", name)
	ret0, _ := ret[0].(int)
	return ret0
}

// CheckStats indicates an expected call of CheckStats.
func (mr *MockmyDBMockRecorder) CheckStats(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStats", reflect.TypeOf((*MockmyDB)(nil).CheckStats), name)
}

// CreatUser mocks base method.
func (m *MockmyDB) CreatUser(name, pass string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatUser", name, pass)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CreatUser indicates an expected call of CreatUser.
func (mr *MockmyDBMockRecorder) CreatUser(name, pass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatUser", reflect.TypeOf((*MockmyDB)(nil).CreatUser), name, pass)
}

// SubMoney mocks base method.
func (m *MockmyDB) SubMoney(name string, money int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubMoney", name, money)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SubMoney indicates an expected call of SubMoney.
func (mr *MockmyDBMockRecorder) SubMoney(name, money interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubMoney", reflect.TypeOf((*MockmyDB)(nil).SubMoney), name, money)
}
